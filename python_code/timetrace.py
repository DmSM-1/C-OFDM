import sys
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

def parse_log_file(filepath: str) -> pd.DataFrame:
    """
    –ü–∞—Ä—Å–∏—Ç –ª–æ–≥-—Ñ–∞–π–ª C++ –≤ DataFrame pandas.
    """
    parsed_data = []
    try:
        with open(filepath, 'r') as f:
            for line in f:
                if not line.strip():
                    continue
                
                iteration_data = {}
                parts = line.strip().split(' ')
                
                for part in parts:
                    try:
                        key, value = part.split(':', 1)
                        if '.' in value or 'e' in value: # –£—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—É—á–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é
                            iteration_data[key] = float(value)
                        else:
                            iteration_data[key] = int(value)
                    except ValueError:
                        pass
                
                if iteration_data:
                    parsed_data.append(iteration_data)
                    
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª '{filepath}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
        
    if not parsed_data:
        print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞.")
        return None

    return pd.DataFrame(parsed_data).sort_values(by='ITER').reset_index(drop=True)

def preprocess_and_amortize(df: pd.DataFrame) -> pd.DataFrame:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–º–æ—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    """
    print("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏...")
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –≤ FR_IN_BUF, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if 'FR_IN_BUF' not in df.columns:
        print("–í–Ω–∏–º–∞–Ω–∏–µ: —Å—Ç–æ–ª–±–µ—Ü 'FR_IN_BUF' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
        df['amortized_SDR'] = df['SDR']
        df['amortized_CONVERT'] = df['CONVERT']
        return df

    # –®–∞–≥ 1: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—ã –ø–∞–∫–µ—Ç–æ–≤, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –æ–¥–Ω–æ–º—É –±—É—Ñ–µ—Ä—É.
    df['buffer_group'] = (df['FR_IN_BUF'] == 1).cumsum()
    
    # –®–∞–≥ 2: –ù–∞—Ö–æ–¥–∏–º, —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –ø–∞–∫–µ—Ç–æ–≤ –±—ã–ª–æ –≤ –∫–∞–∂–¥–æ–º –±—É—Ñ–µ—Ä–µ.
    packets_in_buffer = df.groupby('buffer_group')['FR_IN_BUF'].transform('max')
    
    # –®–∞–≥ 3: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–º–æ—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
    df['amortized_SDR'] = (df['SDR'].fillna(0) / packets_in_buffer)
    df['amortized_CONVERT'] = (df['CONVERT'].fillna(0) / packets_in_buffer)
    
    # –®–∞–≥ 4: "–†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º" –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ –ø–∞–∫–µ—Ç—ã –≤ –≥—Ä—É–ø–ø–µ.
    df['amortized_SDR'] = df.groupby('buffer_group')['amortized_SDR'].transform('max')
    df['amortized_CONVERT'] = df.groupby('buffer_group')['amortized_CONVERT'].transform('max')
    
    print("‚úÖ –ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    return df

def analyze_and_plot(df: pd.DataFrame):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫–∏.
    """
    # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
    # *** –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–±—Ä–∞–ª–∏ 'TIME' –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π. ***
    time_columns_per_packet = [
        col for col in df.columns 
        if col not in ['ITER', 'SEQ', 'DET', 'FR_IN_BUF', 'GLOBAL', 'SDR', 'CONVERT', 'buffer_group'] 
        and (df[col].dtype == 'float64' or df[col].dtype == 'int64')
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∞–º–æ—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    if 'amortized_SDR' in df.columns:
        time_columns_per_packet.extend(['amortized_SDR', 'amortized_CONVERT'])
    
    # --- –ì—Ä–∞—Ñ–∏–∫ 1: –î–∏–Ω–∞–º–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –∏—Ç–µ—Ä–∞—Ü–∏—è–º ---
    plt.figure(figsize=(15, 8))
    for col in time_columns_per_packet:
        plot_data = df[df[col] > 0]
        plt.plot(plot_data['ITER'], plot_data[col], marker='o', linestyle='-', markersize=3, alpha=0.7, label=col)
    
    plt.title('–î–∏–Ω–∞–º–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ (–ø–æ –∏—Ç–µ—Ä–∞—Ü–∏—è–º)', fontsize=16)
    plt.xlabel('–ù–æ–º–µ—Ä –∏—Ç–µ—Ä–∞—Ü–∏–∏ (ITER)', fontsize=12)
    plt.ylabel('–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)', fontsize=12)
    plt.legend()
    plt.grid(True, which='both', linestyle='--', linewidth=0.5)
    plt.yscale('log')
    plt.tight_layout()

    # --- –ì—Ä–∞—Ñ–∏–∫ 2: –°–≥–ª–∞–∂–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (—Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ) ---
    plt.figure(figsize=(15, 8))
    rolling_window = 20
    for col in time_columns_per_packet:
        plot_data = df[df[col] > 0]
        if len(plot_data) > rolling_window:
             plt.plot(plot_data['ITER'], plot_data[col].rolling(window=rolling_window).mean(), linestyle='-', alpha=0.9, label=f'{col} (—Å–≥–ª–∞–∂–µ–Ω–Ω–æ–µ)')

    plt.title(f'–°–≥–ª–∞–∂–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–æ–∫–Ω–æ = {rolling_window})', fontsize=16)
    plt.xlabel('–ù–æ–º–µ—Ä –∏—Ç–µ—Ä–∞—Ü–∏–∏ (ITER)', fontsize=12)
    plt.ylabel('–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)', fontsize=12)
    plt.legend()
    plt.grid(True, which='both', linestyle='--', linewidth=0.5)
    plt.yscale('log')
    plt.tight_layout()

    # --- –ì—Ä–∞—Ñ–∏–∫ 3: –ù–æ–º–µ—Ä–∞ –ø–∞–∫–µ—Ç–æ–≤ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö ---
    if 'SEQ' in df.columns and 'DET' in df.columns:
        plt.figure(figsize=(15, 8))
        plt.plot(df['ITER'], df['SEQ'], 'o-', label='–ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –ø–∞–∫–µ—Ç–∞ (SEQ)', alpha=0.7)
        plt.plot(df['ITER'], df['DET'], 's-', label='–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤ (DET)', alpha=0.7)
        
        plt.title('–î–∏–Ω–∞–º–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–æ–≤', fontsize=16)
        plt.xlabel('–ù–æ–º–µ—Ä –∏—Ç–µ—Ä–∞—Ü–∏–∏ (ITER)', fontsize=12)
        plt.ylabel('–ù–æ–º–µ—Ä –ø–∞–∫–µ—Ç–∞', fontsize=12)
        plt.legend()
        plt.grid(True)
        plt.tight_layout()

    # --- –ì—Ä–∞—Ñ–∏–∫ 4: –ò—Ç–æ–≥–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –≤—Ä–µ–º–µ–Ω ---
    average_times = df[time_columns_per_packet].mean().sort_values(ascending=False)
    
    print("\n--- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –æ–¥–∏–Ω –ø–∞–∫–µ—Ç (—Å —É—á–µ—Ç–æ–º –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏) ---")
    print(average_times.round(6))
    
    plt.figure(figsize=(12, 7))
    sns.set_theme(style="whitegrid")
    barplot = sns.barplot(x=average_times.index, y=average_times.values, palette="viridis")
    
    plt.title('–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è, –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –Ω–∞ –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏', fontsize=16)
    plt.xlabel('–≠—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏', fontsize=12)
    plt.ylabel('–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)', fontsize=12)
    plt.xticks(rotation=45, ha='right')
    
    for p in barplot.patches:
        barplot.annotate(format(p.get_height(), '.2e'),
                       (p.get_x() + p.get_width() / 2., p.get_height()),
                       ha='center', va='center', xytext=(0, 9), textcoords='offset points')

    plt.tight_layout()
    
    print("\nüìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
    plt.show()


if __name__ == "__main__":
    if len(sys.argv) != 2:
        log_filepath = "LOG.txt"
        print(f"INFO: –§–∞–π–ª –ª–æ–≥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: '{log_filepath}'")
    else:
        log_filepath = sys.argv[1]

    raw_df = parse_log_file(log_filepath)
    
    if raw_df is not None:
        processed_df = preprocess_and_amortize(raw_df)
        analyze_and_plot(processed_df)